#include "ege251.h"
#include <iostream>

using namespace std;

/*
Дан целочисленный массив из 20 элементов. Элементы массива могут принимать целые значения от –10 000 до 10 000 включительно.
Опишите на одном из языков программирования алгоритм, позволяющий найти и вывести количество пар элементов массива, 
в которых сумма элементов делится на 2, но не делится на 4. В данной задаче под парой подразумеваются два соседних элемента массива.

Исходные данные объявлены так, как показано ниже на примерах для некоторых языков программирования. Запрещается использовать переменные, 
не описанные ниже, но разрешается не использовать некоторые из описанных переменных.
В качестве ответа Вам необходимо привести фрагмент программы, который должен находиться на месте многоточия. 
Вы можете записать решение также на другом языке программирования (укажите название и используемую версию языка программирования, 
например, Free ascal 2.6).
В этом случае Вы должны использовать те же самые исходные данные и переменные, какие были предложены в приведённых фрагментах.
*/
void task7682()
{
	int const n = 20;
	int a[n];
	int i, j, k;
	for (i = 0; i < n; i++)
		cin >> a[i];
	j = 0;
	for (int i = 0; i < n - 1; i++)
	{
		k = a[i] + a[i + 1];
		if ((k % 2 == 0) && (k % 4 != 0))
		{
			++j;
		}
	}
	cout << j;
}

/*
Дан массив, содержащий 2014 вещественных чисел.
Напишите на одном из языков программирования программу, находящую в этом массиве два соседних элемента,
значения которых наименее близки, то есть абсолютная величина их разности максимальна.
Если таких пар несколько, можно взять любую из них.
Программа должна вывести найденные элементы. Исходные данные объявлены так, как показано ниже.
Запрещается использовать переменные, не описанные ниже, но разрешается не использовать часть из описанных.
В качестве ответа Вам необходимо привести фрагмент программы, который должен находиться на месте многоточия.
Вы можете записать решение также на другом языке программирования
(укажите название и используемую версию языка программирования, например Free Pascal 2.4).
В этом случае вы должны использовать те же самые исходные данные и переменные, какие были предложены в условии.
*/
void task6936()
{
	int const n = 2014;
	float a[n];

	float d, r;

	int i, j, k;

	for (i = 0; i < n; i++)
		cin >> a[i];
	d = INT_MIN;
	for (int i = 0; i < n - 1; i++)
	{
		r = abs(a[i] - a[i + 1]);
		if (r > d)
		{
			d = r;
			k = i;
		}
	}
	cout << a[k] << " " << a[k + 1];
}